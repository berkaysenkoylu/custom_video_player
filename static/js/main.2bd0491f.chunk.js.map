{"version":3,"sources":["assets/images/sprite.svg","components/VideoPlayer/VideoPlayer.module.scss","components/VideoPlayer/Controls/Volume/Volume.module.scss","components/UI/Slider/Slider.module.scss","components/VideoPlayer/Controls/Progress/Progress.module.scss","components/VideoPlayer/Transcript/Line/Line.module.scss","components/VideoPlayer/Controls/PlayButton/PlayButton.module.scss","components/VideoPlayer/Controls/Speed/Speed.module.scss","components/VideoPlayer/Controls/FullScreen/FullScreen.module.scss","components/VideoPlayer/Controls/Controls.module.scss","components/VideoPlayer/Controls/Time/Time.module.scss","components/UI/Slider/Knob/Knob.module.scss","components/VideoPlayer/Transcript/Transcript.module.scss","components/VideoPlayer/Controls/PlayButton/PlayButton.js","components/VideoPlayer/Controls/Time/Time.js","components/VideoPlayer/Controls/Speed/Speed.js","components/UI/Slider/Knob/Knob.js","components/UI/Slider/Slider.js","components/VideoPlayer/Controls/Volume/Volume.js","components/VideoPlayer/Controls/Progress/Progress.js","components/VideoPlayer/Controls/FullScreen/FullScreen.js","components/VideoPlayer/Controls/Controls.js","components/VideoPlayer/Transcript/Line/Line.js","components/VideoPlayer/Transcript/Transcript.js","components/VideoPlayer/VideoPlayer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayButton","props","className","classes","onClick","clicked","PlayButton__Icon","xlinkHref","svg","playing","Time","formatTime","seconds","Date","toISOString","substr","timeContent","duration","played","Speed","useState","playbackRates","index","setIndex","setPlayback","SelectedSpeed","Knob","left","style","onMouseDown","ref","knobRef","id","Slider","onMouseDownHandler","event","target","sliderRef","current","positionX","findPosition","setState","dragStarted","isMouseButtonDown","posX","onMouseUpHandler","state","sliderValue","oldState","onMouseMoveHandler","rect","getBoundingClientRect","rectWidth","Math","floor","width","leftPosPercentage","pageX","React","createRef","initialValue","document","addEventListener","this","removeEventListener","prevProps","prevState","backFullStyle","Slider__Background","Slider__BackgroundFull","Component","Volume","volumeIcon","setValumeIcon","lastVolume","setLastVolume","volumeValue","setVolumeValue","onSliderValueChanged","value","volumeChanged","Volume__Icon","Volume__Range","Progress","isMouseDown","setIsMouseDown","setPosX","backgroundRef","useRef","useEffect","progressValue","onMouseDownHandlerCB","useCallback","seeking","position","onMouseMoveHandlerCB","onMouseUpHandlerCB","seekTo","foregroundStyle","Progress__Background","Progress__Foreground","FullScreen","FullScreen__Icon","fullscreen","Controls","onPlayed","playbackChange","volumeChange","isFullScreen","onScreenSize","Line","forwardRef","classList","isCurrent","Line__Current","join","lineContent","Transcript","memo","lineRef","currentLinePos","offsetTop","content","Object","values","transcript","map","line","key","currentIndex","keyArr","keys","goToSeconds","onLineClickedHandler","transform","heightOffset","VideoPlayer","isPlaying","setIsPlaying","scrollHeight","setScrollHeight","volume","setVolume","playbackRate","setPlaybackRate","videoDuration","setVideoDuration","playedSec","setPlayedSec","fullScreen","setFullScreen","playerWidth","playerHeight","transcriptWidth","currTranscriptWidth","currPlayerWidth","currPlayerHeight","playerStyle","setPlayerStyle","transcriptIndex","setTranscriptIndex","transcriptJson","require","playerRef","scrollRect","updateSize","copiedPlayerStyle","newVals","getWidths","player","window","innerHeight","clientHeight","getCurrentTranscriptIndex","i","length","innerWidth","height","VideoPlayer__Screen","VideoScreen","url","youtubeConfig","playerVars","fs","onStart","onPause","onPlay","onDuration","sec","onProgress","obj","currIndex","playedSeconds","preventDefault","rate","isSeeking","val","newScreenValues","VideoPlayer__TranscriptWrapper","pos","scrollTo","top","behavior","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bd0491f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sprite.dbcf112a.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VideoPlayer\":\"VideoPlayer_VideoPlayer__y7eHe\",\"VideoPlayer__Screen\":\"VideoPlayer_VideoPlayer__Screen__2h615\",\"VideoPlayer__TranscriptWrapper\":\"VideoPlayer_VideoPlayer__TranscriptWrapper__1wiFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Volume\":\"Volume_Volume__2N4fj\",\"Volume__Icon\":\"Volume_Volume__Icon__13cBE\",\"Volume__Range\":\"Volume_Volume__Range__1Y3kq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Slider\":\"Slider_Slider__1_7Ix\",\"Slider__Background\":\"Slider_Slider__Background__Df83M\",\"Slider__BackgroundFull\":\"Slider_Slider__BackgroundFull__3hIp9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Progress\":\"Progress_Progress__SIq6z\",\"Progress__Background\":\"Progress_Progress__Background__2NQSa\",\"Progress__Foreground\":\"Progress_Progress__Foreground__4U6de\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Line\":\"Line_Line__2YwIC\",\"Line__Current\":\"Line_Line__Current__3P-rq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlayButton\":\"PlayButton_PlayButton__2w_hB\",\"PlayButton__Icon\":\"PlayButton_PlayButton__Icon__1DzyN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Speed\":\"Speed_Speed__2Hv6N\",\"SelectedSpeed\":\"Speed_SelectedSpeed__3oPpe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FullScreen\":\"FullScreen_FullScreen__1n83s\",\"FullScreen__Icon\":\"FullScreen_FullScreen__Icon__1Hl3g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__X61bK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Time\":\"Time_Time__303at\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Knob\":\"Knob_Knob__1vILw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Transcript\":\"Transcript_Transcript__29Bah\"};","import React from 'react';\r\n\r\nimport svg from '../../../../assets/images/sprite.svg';\r\nimport classes from './PlayButton.module.scss';\r\n\r\nconst PlayButton = (props) => {\r\n    return (\r\n        <button className={classes.PlayButton} onClick={props.clicked}>\r\n            <svg className={classes.PlayButton__Icon}>\r\n                <use xlinkHref={`${svg}#icon-${props.playing ? 'pause2' : 'play3'}`}></use>\r\n            </svg>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default PlayButton;","import React from 'react';\r\n\r\nimport classes from './Time.module.scss';\r\n\r\nconst Time = (props) => {\r\n    const formatTime = (seconds) => {\r\n        let formattedTime = new Date(seconds * 1000).toISOString().substr(11, 8)\r\n\r\n        return formattedTime;\r\n    }\r\n\r\n    let timeContent = null;\r\n    if(props.duration) {\r\n        timeContent = `${props.played ? formatTime(props.played) : '00:00:00'} / ${formatTime(props.duration)}`\r\n    }\r\n\r\n    // current / whole_duration\r\n    return (\r\n        <span className={classes.Time}>\r\n            {timeContent}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Time;","import React, { useState } from 'react';\r\n\r\nimport classes from './Speed.module.scss';\r\n\r\nconst Speed = (props) => {\r\n    const [playbackRates] = useState([1, 1.5, 2]);\r\n    const [index, setIndex] = useState(0);\r\n\r\n    const changePlaybackHandler = () => {\r\n        setIndex(index => {\r\n            if(index >= 2) {\r\n                index = 0;\r\n            } else {\r\n                index = index + 1;\r\n            }\r\n\r\n            props.setPlayback(playbackRates[index]);\r\n            return index;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Speed} onClick={changePlaybackHandler}>\r\n            <span className={classes.SelectedSpeed}>Speed {`${playbackRates[index]}`}x</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Speed;","import React from 'react';\r\n\r\nimport classes from './Knob.module.scss';\r\n\r\nconst Knob = (props) => {\r\n    let left = props.left;\r\n\r\n    let style = {\r\n        left: `calc(${left}% - 1.25rem)`\r\n    };\r\n\r\n    return (\r\n        <div className={classes.Knob} style={style} onMouseDown={props.clicked} ref={props.knobRef} id={props.id}></div>\r\n    )\r\n}\r\n\r\nexport default Knob;","import React, { Component} from 'react';\r\n\r\nimport classes from './Slider.module.scss';\r\nimport Knob from './Knob/Knob';\r\n\r\nclass Slider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.sliderRef = React.createRef(null);\r\n        this.knobRef = React.createRef(null);\r\n        this.positionX = props.initialValue;\r\n\r\n        this.state = {\r\n            dragStarted: false,\r\n            isMouseButtonDown: false,\r\n            posX: props.initialValue\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.onMouseDownHandler);\r\n        document.addEventListener('mouseup', this.onMouseUpHandler);\r\n        document.addEventListener('mousemove', this.onMouseMoveHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.onMouseDownHandler);\r\n        document.removeEventListener('mouseup', this.onMouseUpHandler);\r\n        document.removeEventListener('mousemove', this.onMouseMoveHandler);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.initialValue !== this.props.initialValue) {\r\n            this.positionX = this.props.initialValue;\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    posX: this.props.initialValue\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onMouseDownHandler = (event) => {\r\n        if(event.target === this.sliderRef.current || event.target === this.knobRef.current) {\r\n            this.positionX = this.findPosition(event);\r\n            this.setState({\r\n                dragStarted: true,\r\n                isMouseButtonDown: true,\r\n                posX: this.positionX\r\n            });\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    onMouseUpHandler = (event) => {\r\n        if(!this.state.dragStarted) {\r\n            return;\r\n        }\r\n        \r\n        this.positionX = this.findPosition(event);\r\n        this.props.sliderValue(this.positionX);\r\n        this.setState(oldState => {\r\n            return {\r\n                dragStarted: !oldState.dragStarted,\r\n                isMouseButtonDown: !oldState.isMouseButtonDown,\r\n                posX: this.positionX\r\n        }});\r\n    }\r\n\r\n    onMouseMoveHandler = (event) => {\r\n        if(!this.state.isMouseButtonDown) {\r\n            return;\r\n        }\r\n\r\n        this.positionX = this.findPosition(event);\r\n        this.props.sliderValue(this.positionX);\r\n        this.setState({\r\n            posX: this.positionX\r\n        });\r\n    }\r\n\r\n    findPosition = (event) => {\r\n        let rect = this.sliderRef.current.getBoundingClientRect();\r\n        let rectWidth = Math.floor(rect.width);\r\n        let leftPosPercentage = ((event.pageX - rect.left) / rectWidth) * 100;\r\n        if(leftPosPercentage > 100) {\r\n            leftPosPercentage = 100;\r\n        }\r\n        else if(leftPosPercentage < 0) {\r\n            leftPosPercentage = 0;\r\n        }\r\n\r\n        return Math.floor(leftPosPercentage);\r\n    }\r\n\r\n    render() {\r\n        let backFullStyle = {\r\n            left: `${0}%`,\r\n            width: `${this.state.posX}%`\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Slider}>\r\n                <Knob left={this.positionX} knobRef={this.knobRef} clicked={this.onMouseDownHandler} />\r\n                <div className={classes.Slider__Background} ref={this.sliderRef}></div>\r\n                <div className={classes.Slider__BackgroundFull} style={backFullStyle}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Slider;\r\n\r\n\r\n\r\n/*\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport classes from './Slider.module.scss';\r\nimport Knob from './Knob/Knob';\r\n\r\nconst Slider = () => {\r\n    const [isDragging, setIsDragging] = useState(false);\r\n    const [mouseButtonHoldDown, setMouseButtonHoldDown] = useState(false);\r\n    const [posX, setPosX] = useState(0);\r\n\r\n    const sliderRef = useRef(null);\r\n    const knobRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', onMouseDownHandler);\r\n        document.addEventListener('mouseup', onMouseUpHandler);\r\n        document.addEventListener('mousemove', onMouseMoveHandler);\r\n\r\n        return () => {\r\n            document.removeEventListener('mousedown', onMouseDownHandler);\r\n            document.removeEventListener('mouseup', onMouseUpHandler);\r\n            document.removeEventListener('mousemove', onMouseMoveHandler);\r\n        };\r\n    }, []);\r\n\r\n    const onMouseDownHandler = (event) => {\r\n        if(event.target !== sliderRef.current) {\r\n            return;\r\n        }\r\n        setIsDragging(isDragging => true);\r\n        setMouseButtonHoldDown(mouseButtonHoldDown => true);\r\n\r\n        let mouseClickPos = findPosition(event);\r\n\r\n        setPosX(posX => Math.floor(mouseClickPos));\r\n    }\r\n\r\n    const onMouseUpHandler = (event) => {\r\n        // if(event.target !== sliderRef.current) {\r\n        //     return;\r\n        // }\r\n\r\n        setMouseButtonHoldDown(false);\r\n\r\n        let mouseClickPos = findPosition(event);\r\n\r\n        setPosX(posX => Math.floor(mouseClickPos));\r\n    }\r\n\r\n    const onMouseMoveHandler = (event) => {\r\n        if(mouseButtonHoldDown) {\r\n            console.log(\"Hey listen\")\r\n        }\r\n    }\r\n\r\n    const findPosition = (event) => {\r\n        let rect = sliderRef.current.getBoundingClientRect();\r\n        let rectWidth = Math.floor(rect.width);\r\n        let leftPosPercentage = ((event.pageX - rect.left) / rectWidth) * 100;\r\n\r\n        return leftPosPercentage;\r\n    }\r\n\r\n    let backFullStyle = {\r\n        left: `${0}%`,\r\n        width: `${posX}%`\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Slider}>\r\n            <Knob left={posX} knobRef={knobRef} />\r\n            <div className={classes.Slider__Background} ref={sliderRef}></div>\r\n            <div className={classes.Slider__BackgroundFull} style={backFullStyle}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Slider;\r\n\r\n*/","import React, { useState } from 'react';\r\n\r\nimport svg from '../../../../assets/images/sprite.svg';\r\nimport classes from './Volume.module.scss';\r\nimport Slider from '../../../UI/Slider/Slider';\r\n\r\nconst Volume = (props) => {\r\n    const [volumeIcon, setValumeIcon] = useState('high');\r\n    const [lastVolume, setLastVolume] = useState(100);\r\n    const [volumeValue, setVolumeValue] = useState(100);\r\n\r\n    const onSliderValueChanged = (value) => {\r\n        if (value <= 0) {\r\n            // 0 => MUTE\r\n            setValumeIcon('mute2');\r\n        }\r\n        else if (value > 0 && value <= 40) {\r\n            // 0 - 40 => LOW\r\n            setValumeIcon('low');\r\n        }\r\n        else if (value > 40 && value <= 70) {\r\n            // 40 - 70 => MIDDLE\r\n            setValumeIcon('medium');\r\n        }\r\n        else {\r\n            // 70 - 100 => HIGH\r\n            setValumeIcon('high');\r\n        }\r\n        setVolumeValue(value);\r\n        setLastVolume(value);\r\n\r\n        props.volumeChanged(value);\r\n    }\r\n\r\n    const onToggleMuteHandler = () => {\r\n        // If not muted\r\n        if(volumeValue !== 0) {\r\n            setLastVolume(lastVolume => volumeValue);\r\n            setVolumeValue(0);\r\n            setValumeIcon('mute2');\r\n\r\n            // MUTE\r\n            props.volumeChanged(0);\r\n        }\r\n        else {\r\n            onSliderValueChanged(lastVolume);\r\n\r\n            // UNMUTE\r\n            props.volumeChanged(lastVolume);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Volume}>\r\n            <svg className={classes.Volume__Icon} onClick={onToggleMuteHandler}>\r\n                <use xlinkHref={`${svg}#icon-volume-${volumeIcon}`}></use>\r\n            </svg>\r\n            \r\n            <div className={classes.Volume__Range}>\r\n                <Slider initialValue={volumeValue} sliderValue={onSliderValueChanged} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Volume;","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\nimport classes from './Progress.module.scss';\r\n\r\nconst Progress = (props) => {\r\n    const [isMouseDown, setIsMouseDown] = useState(false);\r\n    const [posX, setPosX] = useState(0);\r\n\r\n    let backgroundRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if(props.progressValue) {\r\n            setPosX(posX => props.progressValue);\r\n        }\r\n    }, [props.progressValue]);\r\n\r\n    const findPosition = (event) => {\r\n        let rect = backgroundRef.current.getBoundingClientRect();\r\n        let rectWidth = rect.width;\r\n        let leftPosPercentage = ((event.pageX - rect.left) / rectWidth) * 100;\r\n\r\n        if(leftPosPercentage > 100) {\r\n            leftPosPercentage = 100;\r\n        }\r\n\r\n        if(leftPosPercentage < 0) {\r\n            leftPosPercentage = 0;\r\n        }\r\n\r\n        return Math.floor(leftPosPercentage);\r\n    }\r\n\r\n    const onMouseDownHandlerCB = useCallback((event) => {\r\n        if(event.target !== backgroundRef.current) {\r\n            return;\r\n        }\r\n\r\n        setIsMouseDown(isMouseDown => true);\r\n        props.seeking(true);\r\n\r\n        let position = findPosition(event);\r\n\r\n        setPosX(position);\r\n    }, [props]);\r\n\r\n    const onMouseMoveHandlerCB = useCallback((event) => {\r\n        if(isMouseDown) {\r\n            let position = findPosition(event);\r\n\r\n            setPosX(position);\r\n        }\r\n    }, [isMouseDown]);\r\n\r\n    const onMouseUpHandlerCB = useCallback((event) => {\r\n        if(!isMouseDown) {\r\n            return;\r\n        }\r\n\r\n        setIsMouseDown(isMouseDown => false);\r\n        props.seeking(false);\r\n\r\n        let position = findPosition(event);\r\n        props.seekTo(position);\r\n\r\n        setPosX(position);\r\n    }, [isMouseDown, props]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', onMouseDownHandlerCB);\r\n        document.addEventListener('mouseup', onMouseUpHandlerCB);\r\n        document.addEventListener('mousemove', onMouseMoveHandlerCB);\r\n\r\n        return () => {\r\n            document.removeEventListener('mousedown', onMouseDownHandlerCB);\r\n            document.removeEventListener('mouseup', onMouseUpHandlerCB);\r\n            document.removeEventListener('mousemove', onMouseMoveHandlerCB);\r\n        };\r\n    }, [onMouseDownHandlerCB, onMouseMoveHandlerCB, onMouseUpHandlerCB]);\r\n\r\n    let foregroundStyle = {\r\n        left: `${0}%`,\r\n        width: `${posX}%`\r\n    }\r\n    return (\r\n        <div className={classes.Progress}>\r\n            <div className={classes.Progress__Background} ref={backgroundRef}></div>\r\n            <div className={classes.Progress__Foreground} style={foregroundStyle}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Progress;","import React from 'react';\r\n\r\nimport svg from '../../../../assets/images/sprite.svg';\r\nimport classes from './FullScreen.module.scss';\r\n\r\nconst FullScreen = (props) => {\r\n    return (\r\n        <button className={classes.FullScreen} onClick={props.clicked}>\r\n            <svg className={classes.FullScreen__Icon}>\r\n                <use xlinkHref={`${svg}#icon-${props.fullscreen ? 'shrink' : 'enlarge'}`}></use>\r\n            </svg>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default FullScreen;","import React from 'react';\r\n\r\nimport classes from './Controls.module.scss';\r\nimport PlayButton from './PlayButton/PlayButton';\r\nimport Time from './Time/Time';\r\nimport Speed from './Speed/Speed';\r\nimport Volume from './Volume/Volume';\r\nimport Progress from './Progress/Progress';\r\nimport FullScreen from './FullScreen/FullScreen';\r\n\r\nconst Controls = (props) => {\r\n    return (\r\n        <div className={classes.Controls}>\r\n            <Progress \r\n                progressValue={props.played / props.duration * 100}\r\n                seeking={props.seeking}\r\n                seekTo={props.seekTo}\r\n            />\r\n\r\n            <PlayButton playing={props.playing} clicked={props.onPlayed} />\r\n\r\n            <Time duration={props.duration} played={props.played} />\r\n\r\n            <Speed setPlayback={props.playbackChange} />\r\n\r\n            <Volume volumeChanged={props.volumeChange} />\r\n\r\n            <FullScreen fullscreen={props.isFullScreen} clicked={props.onScreenSize} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls;","import React from 'react';\r\n\r\nimport classes from './Line.module.scss';\r\n\r\nconst Line = React.forwardRef((props, ref) => {\r\n    let classList = [classes.Line];\r\n\r\n    if(props.isCurrent) {\r\n        classList = [classes.Line, classes.Line__Current];\r\n    }\r\n\r\n    return (\r\n        <li className={classList.join(' ')} onClick={props.clicked} ref={ref}>\r\n            {props.lineContent}\r\n        </li>\r\n    )\r\n})\r\n\r\nexport default Line;","import React, { useEffect, useRef } from 'react';\r\n\r\nimport classes from './Transcript.module.scss';\r\nimport Line from './Line/Line';\r\n\r\nconst Transcript = React.memo((props) => {\r\n    let lineRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        props.currentLinePos(lineRef.current.offsetTop);\r\n    }, [props]);\r\n\r\n    const onLineClickedHandler = (index) => {\r\n        let keyArr = Object.keys(props.transcript);\r\n\r\n        props.goToSeconds(keyArr[index], index);\r\n    }\r\n    \r\n    let content = null;\r\n    content = Object.values(props.transcript).map((line, index) => {\r\n        return <Line\r\n            key={index}\r\n            lineContent={line}\r\n            isCurrent={index === props.currentIndex}\r\n            clicked={() => onLineClickedHandler(index)}\r\n            ref={index === props.currentIndex ? lineRef : null}\r\n        />\r\n    });\r\n\r\n\r\n    let style = {\r\n        transform: `translateY(${props.heightOffset / 2 - 50 || 175}px)`\r\n    }\r\n\r\n    return (\r\n        <ul className={classes.Transcript} style={style}>\r\n            {content}\r\n        </ul>\r\n    );\r\n});\r\n\r\nexport default Transcript;","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport ReactPlayer  from 'react-player';\r\n\r\nimport classes from './VideoPlayer.module.scss';\r\nimport Controls from './Controls/Controls';\r\nimport Transcript from './Transcript/Transcript';\r\n\r\n// let json = require(\"../../assets/transcripts/transcript1.json\");\r\n\r\nconst VideoPlayer = (props) => {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    // const [controlsVisible, setControlsVisible] = useState(false);\r\n    const [scrollHeight, setScrollHeight] = useState(null);\r\n    const [volume, setVolume] = useState(1);\r\n    const [playbackRate, setPlaybackRate] = useState(1);\r\n    const [videoDuration, setVideoDuration] = useState(null);\r\n    const [playedSec, setPlayedSec] = useState(0);\r\n    const [fullScreen, setFullScreen] = useState(false);\r\n    const [playerStyle, setPlayerStyle] = useState({\r\n        playerWidth: 600,\r\n        playerHeight: 450,\r\n        transcriptWidth: 250,\r\n        currTranscriptWidth: 250,\r\n        currPlayerWidth: 600,\r\n        currPlayerHeight: 450,\r\n    });\r\n    const [transcriptIndex, setTranscriptIndex] = useState(0);\r\n\r\n    const transcriptJson = require('../../assets/transcripts/transcript1.json');\r\n\r\n    let playerRef = useRef(null);\r\n    let scrollRect = useRef(null);\r\n    // let timeoutId;\r\n\r\n    const updateSize = useCallback(\r\n        () => {\r\n            if(fullScreen) {\r\n                const copiedPlayerStyle = {...playerStyle};\r\n                let newVals = getWidths();\r\n                copiedPlayerStyle.currTranscriptWidth = newVals.transcript;\r\n                copiedPlayerStyle.currPlayerWidth = newVals.player;\r\n                copiedPlayerStyle.currPlayerHeight = window.innerHeight;\r\n\r\n                setPlayerStyle(copiedPlayerStyle)\r\n            }\r\n        },\r\n        [fullScreen, playerStyle],\r\n    )\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', updateSize);\r\n        setScrollHeight(scrollRect.current.clientHeight);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', updateSize);\r\n        }\r\n    }, [updateSize])\r\n\r\n    // useEffect(() => {\r\n    //     return () => {\r\n    //         clearTimeout(timeoutId);\r\n    //     };\r\n    // }, [timeoutId]);\r\n\r\n    const onPlayedHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        setIsPlaying(isPlaying => !isPlaying);\r\n    }\r\n\r\n    const onPlayerStartHandler = () => {\r\n        setIsPlaying(isPlaying => true);\r\n    }\r\n\r\n    const onPlayerPausedHandler = () => {\r\n        setIsPlaying(isPlaying => false);\r\n    }\r\n\r\n    const onPlayerResumeHandler = () => {\r\n        setIsPlaying(isPlaying => true);\r\n    }\r\n\r\n    const onSetPlaybackHandler = (rate) => {\r\n        setPlaybackRate(playbackRate => rate);\r\n    }\r\n\r\n    const onVolumeChangeHandler = (value) => {\r\n        setVolume(value / 100);\r\n    }\r\n\r\n    const onGetDuration = (sec) => {\r\n        setVideoDuration(videoDuration => sec);\r\n    }\r\n\r\n    const onGetProgress = (obj) => {\r\n        // Also get the new transcript index\r\n        let currIndex = getCurrentTranscriptIndex(obj.playedSeconds);\r\n        setTranscriptIndex(currIndex);\r\n\r\n        setPlayedSec(playedSec => obj.playedSeconds);\r\n    }\r\n\r\n    // const toggleControlVisibility = (isMouseIn) => {   \r\n    //     // console.log(isMouseIn)     \r\n    //     if(!isMouseIn) {\r\n    //         timeoutId = setTimeout(() => {\r\n    //             setControlsVisible(controlsVisible => isMouseIn);\r\n    //         }, 3000);\r\n    //     }\r\n    //     else {\r\n    //         setControlsVisible(controlsVisible => isMouseIn);\r\n    //     }\r\n    // }\r\n\r\n    const onSeekingHandler = (isSeeking) => {\r\n        if(isSeeking) {\r\n            setIsPlaying(isPlaying => false);\r\n        }\r\n\r\n        if(!isSeeking) {\r\n            setIsPlaying(isPlaying => true);\r\n        }\r\n    }\r\n\r\n    const onSeekToHandler = (val) => {\r\n        playerRef.current.seekTo(val / 100, 'fraction');\r\n    }\r\n\r\n    const onGoToSecondsHandler = (seconds, index) => {\r\n        if(!isPlaying) {\r\n            setIsPlaying(true);\r\n        }\r\n        setTranscriptIndex(index);\r\n\r\n        playerRef.current.seekTo(seconds, 'seconds');\r\n    }\r\n\r\n    const onScreenSizeHandler = () => {\r\n        let newScreenValues = {\r\n            ...playerStyle\r\n        }\r\n\r\n        if(!fullScreen) {\r\n            let newVals = getWidths();\r\n            newScreenValues.currTranscriptWidth = newVals.transcript;\r\n            newScreenValues.currPlayerWidth = newVals.player;\r\n            newScreenValues.currPlayerHeight = window.innerHeight;\r\n        }\r\n        else {\r\n            newScreenValues.currTranscriptWidth = newScreenValues.transcriptWidth;\r\n            newScreenValues.currPlayerWidth = newScreenValues.playerWidth;\r\n            newScreenValues.currPlayerHeight = newScreenValues.playerHeight;\r\n        }\r\n        setPlayerStyle(newScreenValues);\r\n\r\n        setFullScreen(fullScreen => !fullScreen);\r\n    }\r\n\r\n    // const scrollingTo = (index, length) => {\r\n    //     scrollRect.current.scrollTo({ top: scrollRect.current.scrollTopMax / length * index + 5, behavior: 'smooth' });\r\n    // }\r\n\r\n    const scrollToPositionHandler = (pos) => {\r\n        // TODO: check if isPlaying?\r\n\r\n        scrollRect.current.scrollTo({ top: pos, behavior: 'smooth' });\r\n    }\r\n\r\n    const getCurrentTranscriptIndex = (seconds) => {\r\n        let index = 0;\r\n        let keyArr = Object.keys(transcriptJson);\r\n        for(let i = 1; i < keyArr.length; i++) {\r\n            if(seconds >= +keyArr[i-1] && seconds < +keyArr[i]) {\r\n                index = i-1;\r\n            }\r\n            else if(seconds >= +keyArr[i]) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    const getWidths = () => {\r\n        // 75% video, 25% transcript\r\n        let widths = {\r\n            player: +Math.floor(window.innerWidth * 75 / 100),\r\n            transcript: +Math.floor(window.innerWidth * 25 / 100)\r\n        }\r\n        return widths;\r\n    }\r\n\r\n    // onMouseEnter={() => toggleControlVisibility(true)} onMouseLeave={() => toggleControlVisibility(false)}\r\n    return (\r\n        <div className={classes.VideoPlayer} style={{height: `${playerStyle.currPlayerHeight}px`}}>\r\n            <div className={classes.VideoPlayer__Screen} > \r\n                <div className={classes.VideoScreen} style={{ width: `${playerStyle.currPlayerWidth}px`, height: `${playerStyle.currPlayerHeight}px` }}>\r\n                    <ReactPlayer\r\n                        ref={playerRef}\r\n                        url='https://www.youtube.com/watch?v=MYMS1V8GwBk'\r\n                        youtubeConfig={{ playerVars: { fs: 0 } }}\r\n                        volume={volume}\r\n                        onStart={onPlayerStartHandler}\r\n                        onPause={onPlayerPausedHandler}\r\n                        onPlay={onPlayerResumeHandler}\r\n                        onDuration={onGetDuration}\r\n                        onProgress={onGetProgress}\r\n                        playbackRate={playbackRate}\r\n                        playing={isPlaying}\r\n                        width='100%'\r\n                        height={`${playerStyle.currPlayerHeight - 50}px`}\r\n                    />\r\n                </div>\r\n                <Controls \r\n                    // visible={controlsVisible}\r\n                    onPlayed={onPlayedHandler}\r\n                    playing={isPlaying}\r\n                    volumeChange={onVolumeChangeHandler}\r\n                    playbackChange={onSetPlaybackHandler}\r\n                    played={playedSec}\r\n                    duration={videoDuration}\r\n                    seeking={onSeekingHandler}\r\n                    seekTo={onSeekToHandler}\r\n                    isFullScreen={fullScreen}\r\n                    onScreenSize={onScreenSizeHandler}\r\n                />\r\n            </div>\r\n            <div className={classes.VideoPlayer__TranscriptWrapper} style={{width: `${playerStyle.currTranscriptWidth}px` }} ref={scrollRect}>\r\n                <Transcript\r\n                    heightOffset={scrollHeight}\r\n                    transcript={transcriptJson}\r\n                    currentIndex={transcriptIndex}\r\n                    goToSeconds={onGoToSecondsHandler}\r\n                    currentLinePos={scrollToPositionHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoPlayer;","import React from 'react';\n\nimport VideoPlayer from './components/VideoPlayer/VideoPlayer';\n\nfunction App() {\n  return (\n    <div style={{height: '100vh'}}>\n      <VideoPlayer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}